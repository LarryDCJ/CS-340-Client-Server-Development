from jupyter_plotly_dash import JupyterDash

import dash
import dash_leaflet as dl
import dash_core_components as dcc
import dash_html_components as html
import plotly.express as px
import dash_table as dt
from dash.dependencies import Input, Output, State

import base64

import os
import numpy as np
import pandas as pd
from pymongo import MongoClient
from bson.json_util import dumps

from animal_shelter import AnimalShelter

###########################
# Data Manipulation / Model
###########################
# FIX ME change for your username and password and CRUD Python module name
username = "aacuser"
password = "3935"
shelter = AnimalShelter(username, password)

# class read method must support return of cursor object
df = pd.DataFrame.from_records(shelter.read({}))

#########################
# Dashboard Layout / View
#########################
app = JupyterDash('SimpleExample')

image_filename = 'gsl.png'
encoded_image = base64.b64encode(open(image_filename, 'rb').read())

app.layout = html.Div([
    html.Center(html.Img(src='data:image/png;base64,{}'.format(encoded_image.decode()))),
    html.Center(html.B(html.H1('Larry Cawley CS-340 Dashboard'))),
    html.Center(html.P('Choose up to 5 rows to populate the map!')),
    html.Hr(),
    html.Div(
        # Radio Items to select the rescue filter options
        dcc.RadioItems(
            id='filter-type',
            # created the labels and keys based on the Grazioso requirements
            options=[
                {'label': 'Water Rescue', 'value': 'WTR'},
                {'label': 'Mountain/Wilderness Rescue', 'value': 'MWR'},
                {'label': 'Disaster Rescue/Individual Tracking', 'value': 'DIT'},
                {'label': 'All', 'value': 'All'}
            ],
            value='All',
            labelStyle={'display': 'inline-block'}
        )
    ),
    html.Hr(),
    dt.DataTable(
        id='datatable-id',
        columns=[
            {"name": i, "id": i, "deletable": False, "selectable": True} for i in df.columns
        ],
        data=df.to_dict('records'),
        editable=False,
        filter_action="native",
        sort_action="native",
        sort_mode="multi",
        column_selectable=False,
        row_selectable=True,
        row_deletable=True,
        selected_columns=[],
        selected_rows=[],
        page_action="native",
        page_current=0,
        page_size=10,
    ),
    html.Br(),
    html.Hr(),
    # This sets up the dashboard so that your chart and your geolocation chart are side-by-side
    html.Div(className='row',
             style={'display': 'flex'},
             children=[
                 html.Div(
                     id='graph-id',
                     className='col s12 m6',
                 ),
                 html.Div(
                     id='map-id',
                     className='col s12 m6',
                 )
             ])
])


#############################################
# Interaction Between Components / Controller
#############################################
@app.callback([Output('datatable-id', 'data'),
               Output('datatable-id', 'columns')],
              [Input('filter-type', 'value')])
def update_dashboard(filter_type):
    # adjusts the read request for the desired dog type and status
    if filter_type == 'WTR':
        # complex queries used to compile - was not sure which "Newfoundland" they wanted
        # so I added all that came up in animals.distinct('breed') that used "Newfoundland"
        df = pd.DataFrame(list(shelter.read({'$and': [{'sex_upon_outcome': 'Intact Female'},
                                                      {'$or': [
                                                          {'breed': 'Labrador Retriever Mix'},
                                                          {'breed': 'Chesa Bay Retr Mix'},
                                                          {'breed': 'Newfoundland Mix'},
                                                          {'breed': 'Newfoundland/Labrador Retriever'},
                                                          {'breed': 'Newfoundland/Australian Cattle Dog'},
                                                          {'breed': 'Newfoundland/Great Pyrenees'}]
                                                      },
                                                      {'$and': [{'age_upon_outcome_in_weeks': {'$gte': 26}},
                                                                {'age_upon_outcome_in_weeks': {'$lte': 156}}]
                                                       }]
                                             })))
    # adjusts the read request for the desired dog type and status
    elif filter_type == 'MWR':
        # breeds and ages determined by Grazioso
        df = pd.DataFrame(list(shelter.read({'$and': [{'sex_upon_outcome': 'Intact Male'},
                                                      {'$or': [
                                                          {'breed': 'German Shepherd'},
                                                          {'breed': 'Alaskan Malamute'},
                                                          {'breed': 'Old English Sheepdog'},
                                                          {'breed': 'Rottweiler'},
                                                          {'breed': 'Siberian Husky'}]
                                                      },
                                                      {'$and': [{'age_upon_outcome_in_weeks': {'$gte': 26}},
                                                                {'age_upon_outcome_in_weeks': {'$lte': 156}}]
                                                       }]
                                             })))
    # adjusts the read request for the desired dog type and status
    elif filter_type == 'DIT':
        # breeds and ages determined by Grazioso
        df = pd.DataFrame(list(shelter.read({'$and': [{'sex_upon_outcome': 'Intact Male'},
                                                      {'$or': [
                                                          {'breed': 'Doberman Pinscher'},
                                                          {'breed': 'German Shepherd'},
                                                          {'breed': 'Golden Retriever'},
                                                          {'breed': 'Bloodhound'},
                                                          {'breed': 'Rottweiler'}]
                                                      },
                                                      {'$and': [{'age_upon_outcome_in_weeks': {'$gte': 20}},
                                                                {'age_upon_outcome_in_weeks': {'$lte': 300}}]
                                                       }]
                                             })))
    # resets the search to nothing to allow all results to be displayed
    elif filter_type == 'All':
        df = pd.DataFrame.from_records(shelter.read({}))
        
    columns = [{"name": i, "id": i, "deletable": False, "selectable": True} for i in df.columns]
    data = df.to_dict('records')

    return (data, columns)


@app.callback(
    Output('datatable-id', 'style_data_conditional'),
    [Input('datatable-id', 'selected_columns')]
)
def update_styles(selected_columns):
    return [{
        'if': {'column_id': i},
        'background_color': '#D2F3FF'
    } for i in selected_columns]


@app.callback(
    Output('graph-id', "children"),
    [Input('datatable-id', "derived_viewport_data")])
def update_graphs(viewData):
    # imports the currently displayed data
    dff = pd.DataFrame.from_dict(viewData)
    # creates the values needed for the names (breed) and values (recurring counts)
    names = dff['breed'].value_counts().keys().tolist()
    values = dff['breed'].value_counts().tolist()
    # creates a pie chart based on the data above
    return [
        dcc.Graph(
            figure=px.pie(
                data_frame=dff,
                values=values,
                names=names,
                color_discrete_sequence=px.colors.sequential.RdBu,
                width=800,
                height=500
            )
        )
    ]


@app.callback(
    Output('map-id', "children"),
    [Input('datatable-id', "derived_viewport_data"),
     Input('datatable-id', 'selected_rows'),
     Input('datatable-id', 'selected_columns')])
def update_map(viewData, rows, columns):
    dff = pd.DataFrame.from_dict(viewData)

    center = [30.75, -97.48]
    zoom = 10
    style = {'width': '1000px', 'height': '500px'}

    markers = []
    for i in rows:
        markers.append(dl.Marker(position=[dff.iloc[i, 13], dff.iloc[i, 14]], children=[
            dl.Tooltip(dff.iloc[i, 4]),
            dl.Popup([
                html.H4("Animal Name"),
                html.P(dff.iloc[i, 9]),
                html.H4("Sex"),
                html.P(dff.iloc[i, 12]),
                html.H4("Breed"),
                html.P(dff.iloc[i, 4]),
                html.H4("Age"),
                html.P(dff.iloc[i, 15])
            ])
        ]))

    map_children = [dl.TileLayer(id="base-layer-id")]
    map_children.extend(markers)

    return [
        dl.Map(center=center, zoom=zoom, style=style, children=map_children)
    ]
app
